local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/AnotherSecurity/fug49fg19du8/main/2959729834"))()

local MainFrame = Library:CreateWindow({
	Name = "armored.cc - Trident",
	Themeable = {
		Info = "Made by armored.cc on discord\nDiscord Server: CKqQhfGsrp",
		Credit = false
	},
	Background = "",
	Theme = [[{"__Designer.Colors.topGradient":"000000","__Designer.Settings.ShowHideKey":"Enum.KeyCode.LShift","__Designer.Colors.section":"FFFFFF","__Designer.Colors.hoveredOptionBottom":"2D2D2D","__Designer.Background.ImageAssetID":"","__Designer.Colors.selectedOption":"000000","__Designer.Colors.unselectedOption":"282828","__Designer.Files.WorkspaceFile":"armored.CC","__Designer.Colors.unhoveredOptionTop":"323232","__Designer.Colors.outerBorder":"FF0000","__Designer.Background.ImageColor":"FFFFFF","__Designer.Colors.tabText":"FFFFFF","__Designer.Colors.elementBorder":"5C0000","__Designer.Colors.sectionBackground":"171717","__Designer.Colors.innerBorder":"000000","__Designer.Background.ImageTransparency":100,"__Designer.Colors.bottomGradient":"000000","__Designer.Colors.elementText":"FFFFFF","__Designer.Colors.hoveredOptionTop":"414141","__Designer.Colors.otherElementText":"FFFFFF","__Designer.Colors.main":"FF2727","__Designer.Colors.background":"000000","__Designer.Colors.unhoveredOptionBottom":"232323","__Designer.Background.UseBackgroundImage":false}]]
})

-- Tabs --

local lcplayerTab = MainFrame:CreateTab({
	Name = "LocalPlayer"
})


local CombatTab = MainFrame:CreateTab({
	Name = "Combat"
})


local ESPTab = MainFrame:CreateTab({
	Name = "ESP"
})

--[[
local MaliciousTab = MainFrame:CreateTab({
	Name = "Malicious"
})
]]

--[[
local WorldsettingsTab = MainFrame:CreateTab({
	Name = "World"
})
]]

local  DividerTab = MainFrame:CreateTab({
	Name = "|"
})

-- Sections --

-- Local Player Section -- 
local Visualssection = lcplayerTab:CreateSection({
	Name = "Visuals",
    Side = "Right"
})

-- Combat Section --

local Silentaimsection = CombatTab:CreateSection({
	Name = "Silent Aim"
})

local hitboxsection = CombatTab:CreateSection({
	Name = "Head/Torso Hitbox"
})

local weaponmodsection = CombatTab:CreateSection({
	Name = "Weapon Modification",
    Side = "Right"
})

local aurasection = CombatTab:CreateSection({
	Name = "Aura",
    Side = "Right"
})

local trollingsection = CombatTab:CreateSection({
	Name = "Trolling",
    Side = "Right"
})

-- ESP Section --

local PlayerESPsection = ESPTab:CreateSection({
	Name = "Player ESP"
})

local OreESPsection = ESPTab:CreateSection({
	Name = "Ore ESP"
})

local ObESPsection = ESPTab:CreateSection({
	Name = "Object ESP",
    Side = "Right"
})

-- Malicious ESP --
--[[
local exploitssection = MaliciousTab:CreateSection({
	Name = "Exploits"
})

local extrasection = MaliciousTab:CreateSection({
	Name = "Extra",
    Side = "Right"
})
]]
-- World Section -- 

--[[
local lightingsection = WorldsettingsTab:CreateSection({
	Name = "Lighting"
})
]]

-- Scripts/Buttons --

-- Local Visual Area --
local isFullBright = false
local loopThread = nil

local function SetFullBright(enabled)
    if enabled then
        game.Lighting.Brightness = 2
        game.Lighting.Ambient = Color3.new(1, 1, 1)
        game.Lighting.GlobalShadows = false
        game.Lighting.FogStart = 999999999999999999
    else
        game.Lighting.Brightness = 1
        game.Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
        game.Lighting.GlobalShadows = true
        game.Lighting.FogStart = 0
    end
end

Visualssection:AddToggle({
    Name = "Full Bright",
    Callback = function(New, Old)
        isFullBright = New
        
        if isFullBright then
            loopThread = coroutine.create(function()
                while isFullBright do
                    SetFullBright(true)
                    wait()
                end
            end)
            coroutine.resume(loopThread)
        elseif loopThread then
            isFullBright = false
            coroutine.resume(loopThread)
            loopThread = nil
            SetFullBright(false)
        else
            SetFullBright(false)
        end
    end
})


--[[
Visualssection:AddToggle({
	Name = "Base Xray",
	Callback = function(New, Old)
		
	end
})
]]

Visualssection:AddToggle({
	Name = "Chat",
	Callback = function(New, Old)
		if New == true then
            game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Chat.Visible = false
        else New = false do
            game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Chat.Visible = true
        end
        end
	end
})

--[[
Visualssection:AddToggle({
	Name = "Blood",
	Callback = function(New, Old)
		
	end
})
]]

Visualssection:AddToggle({
	Name = "Char Color Enabled",
	Callback = function(New, Old)
		if New == true then
            game.Workspace.Ignore.FPSArms.RightLowerArm.Material = Enum.Material.ForceField
            game.Workspace.Ignore.FPSArms.RightLowerArm.Color = Color3.new(1, 0, 0)
    
            game.Workspace.Ignore.FPSArms.RightHand.Material = Enum.Material.ForceField
            game.Workspace.Ignore.FPSArms.RightHand.Color = Color3.new(1, 0, 0)
    
            game.Workspace.Ignore.FPSArms.LeftLowerArm.Material = Enum.Material.ForceField
            game.Workspace.Ignore.FPSArms.LeftLowerArm.Color = Color3.new(1, 0, 0)
    
            game.Workspace.Ignore.FPSArms.RightUpperArm.Material = Enum.Material.ForceField
            game.Workspace.Ignore.FPSArms.RightUpperArm.Color = Color3.new(1, 0, 0)
    
            game.Workspace.Ignore.FPSArms.LeftUpperArm.Material = Enum.Material.ForceField
            game.Workspace.Ignore.FPSArms.LeftUpperArm.Color = Color3.new(1, 0, 0)
    
            game.Workspace.Ignore.FPSArms.LeftHand.Material = Enum.Material.ForceField
            game.Workspace.Ignore.FPSArms.LeftHand.Color = Color3.new(1, 0, 0)
        else New = false do
            local defaultMaterial = Enum.Material.SmoothPlastic
            local defaultColor = BrickColor.new("Lemon metalic")
                game.Workspace.Ignore.FPSArms.RightLowerArm.Material = defaultMaterial
                game.Workspace.Ignore.FPSArms.RightLowerArm.BrickColor = defaultColor
    
                game.Workspace.Ignore.FPSArms.RightHand.Material = defaultMaterial
                game.Workspace.Ignore.FPSArms.RightHand.BrickColor = defaultColor
    
                game.Workspace.Ignore.FPSArms.RightUpperArm.Material = defaultMaterial
                game.Workspace.Ignore.FPSArms.RightUpperArm.BrickColor = defaultColor
    
                game.Workspace.Ignore.FPSArms.LeftUpperArm.Material = defaultMaterial
                game.Workspace.Ignore.FPSArms.LeftUpperArm.BrickColor = defaultColor
    
                game.Workspace.Ignore.FPSArms.LeftLowerArm.Material = defaultMaterial
                game.Workspace.Ignore.FPSArms.LeftLowerArm.BrickColor = defaultColor
    
                game.Workspace.Ignore.FPSArms.LeftHand.Material = defaultMaterial
                game.Workspace.Ignore.FPSArms.LeftHand.BrickColor = defaultColor
        end
        end
	end
})

Visualssection:AddToggle({
	Name = "Server Location",
	Callback = function(New, Old)
		if New == true then
            game:GetService("Players").LocalPlayer.PlayerGui.GameUI.ServerInfo.Visible = false
        else New = false do
            game:GetService("Players").LocalPlayer.PlayerGui.GameUI.ServerInfo.Visible = true
        end
        end
	end
})

-- Combat Area --

--[[
weaponmodsection:AddToggle({
	Name = "Enabled",
	Callback = function(New, Old)
		
	end
})

weaponmodsection:AddToggle({
	Name = "No-Recoil",
	Callback = function(New, Old)
		
	end
})
]]

local isheadsize = false

local headsize = Vector3.new(1.6, 1.6, 1.6)

local function changeHeadSize(model)
    local head = model:FindFirstChild("Head")
    if head then
        head.Size = headsize
        head.Transparency = 0.6
    end
end

local function updateHeadSizes()
    for _, model in ipairs(game.Workspace:GetDescendants()) do
        if model:IsA("Model") and model:FindFirstChild("Head") then
            changeHeadSize(model)
        end
    end
end

hitboxsection:AddToggle({
    Name = "Head",
    Callback = function(New, Old)
        isheadsize = New

        if isheadsize then
            updateHeadSizes() -- Update head sizes for all players in Workspace
        else
            -- Reset head sizes to default values when the toggle is turned off
            for _, model in ipairs(game.Workspace:GetDescendants()) do
                if model:IsA("Model") and model:FindFirstChild("Head") then
                    local defaultSize = Vector3.new(1.6, 1.6, 1.2) -- Change this to the default head size
                    model.Head.Size = defaultSize
                    model.Head.Transparency = 0
                end
            end
        end
    end
})

local function updateHeadSizeX(Value)
    headsize = Vector3.new(Value, headsize.Y, headsize.Z)
    if Value == 0 then
        return "X: Default"
    else
        return "X: " .. tostring(Value)
    end
end

local function updateHeadSizeY(Value)
    headsize = Vector3.new(headsize.X, Value, headsize.Z)
    if Value == 0 then
        return "Y: Default"
    else
        return "Y: " .. tostring(Value)
    end
end

local function updateHeadSizeZ(Value)
    headsize = Vector3.new(headsize.X, headsize.Y, Value)
    if Value == 0 then
        return "Z: Default"
    else
        return "Z: " .. tostring(Value)
    end
end

hitboxsection:AddSlider({
    Name = "X",
    Flag = "hitboxsection_HeadSizeX",
    Value = 1.6,
    Precise = 2,
    Min = 1.2,
    Max = 2.5,
    Textbox = true,
    Format = updateHeadSizeX,
    ValueChanged = function(Value)
        updateHeadSizeX(Value)
        if isheadsize then
            updateHeadSizes()
        end
    end,
})

hitboxsection:AddSlider({
    Name = "Y",
    Flag = "hitboxsection_HeadSizeY",
    Value = 1.6,
    Precise = 2,
    Min = 1.2,
    Max = 2.5,
    Textbox = true,
    Format = updateHeadSizeY,
    ValueChanged = function(Value)
        updateHeadSizeY(Value)
        if isheadsize then
            updateHeadSizes()
        end
    end,
})

hitboxsection:AddSlider({
    Name = "Z",
    Flag = "hitboxsection_HeadSizeZ",
    Value = 1.6,
    Precise = 2,
    Min = 1.2,
    Max = 2.5,
    Textbox = true,
    Format = updateHeadSizeZ,
    ValueChanged = function(Value)
        updateHeadSizeZ(Value)
        if isheadsize then
            updateHeadSizes()
        end
    end,
})


local istorsosize = false

local torsosize = Vector3.new(1.6, 1.6, 1.6)

local function changeTorsoSize(model)
    local torso = model:FindFirstChild("Torso")
    if torso then
        torso.Size = torsosize
        torso.Transparency = 0.6
    end
end

local function updateTorsoSizes()
    for _, model in ipairs(game.Workspace:GetDescendants()) do
        if model:IsA("Model") and model:FindFirstChild("Torso") then
            changeTorsoSize(model)
        end
    end
end

hitboxsection:AddToggle({
    Name = "Torso",
    Callback = function(New, Old)
        istorsosize = New

        if istorsosize then
            updateTorsoSizes()
        else
            for _, model in ipairs(game.Workspace:GetDescendants()) do
                if model:IsA("Model") and model:FindFirstChild("Torso") then
                    local defaultSize = Vector3.new(1.2,1.2,1.2)
                    model.Torso.Size = defaultSize
                    model.Torso.Transparency = 0
                end
            end
        end
    end
})

local function updateTorsoSizeX(Value)
    torsosize = Vector3.new(Value, torsosize.Y, torsosize.Z)
    if Value == 0 then
        return "X: Default"
    else
        return "X: " .. tostring(Value)
    end
end

local function updateTorsoSizeY(Value)
    torsosize = Vector3.new(torsosize.X, Value, torsosize.Z)
    if Value == 0 then
        return "Y: Default"
    else
        return "Y: " .. tostring(Value)
    end
end

local function updateTorsoSizeZ(Value)
    torsosize = Vector3.new(torsosize.X, torsosize.Y, Value)
    if Value == 0 then
        return "Z: Default"
    else
        return "Z: " .. tostring(Value)
    end
end

hitboxsection:AddSlider({
    Name = "X",
    Flag = "hitboxsection_TorsoSizeX",
    Value = 1.3,
    Precise = 2,
    Min = 1.2,
    Max = 2.5,
    Textbox = true,
    Format = updateTorsoSizeX,
    ValueChanged = function(Value)
        updateTorsoSizeX(Value)
        if istorsosize then
            updateTorsoSizes()
        end
    end,
})

hitboxsection:AddSlider({
    Name = "Y",
    Flag = "hitboxsection_TorsoSizeY",
    Value = 1.3,
    Precise = 2,
    Min = 1.2,
    Max = 2.5,
    Textbox = true,
    Format = updateTorsoSizeY,
    ValueChanged = function(Value)
        updateTorsoSizeY(Value)
        if istorsosize then
            updateTorsoSizes()
        end
    end,
})

hitboxsection:AddSlider({
    Name = "Z",
    Flag = "hitboxsection_TorsoSizeZ",
    Value = 1.3,
    Precise = 2,
    Min = 1.2,
    Max = 2.5,
    Textbox = true,
    Format = updateTorsoSizeZ,
    ValueChanged = function(Value)
        updateTorsoSizeZ(Value)
        if istorsosize then
            updateTorsoSizes()
        end
    end,
})

local function findChatRemoteEvent()
    local gameDescendants = game:GetDescendants()
    for _, descendant in ipairs(gameDescendants) do
        if descendant:IsA("RemoteEvent") and descendant.Name == "ChatEvent" then
            return descendant
        end
    end
    return nil
end

trollingsection:AddButton({
    Name = "Fake kill log",
    Callback = function()
        -- Get the player who pressed the button
        local player = game.Players.LocalPlayer

        -- Check if the player exists and is a valid player
        if player then
            -- Simulate the player typing the chat message
            local message = "7Guue2JS"
            game:GetService("Players"):Chat(message)
        end
    end
})



-- ESP Area --
local isPlrESPbox = false
local highlightTable = {}

local function createHighlight(model)
    local esp = Instance.new("BoxHandleAdornment")
    esp.Name = "ESPBox"
    esp.Size = Vector3.new(2, 2, 2)
    esp.Adornee = model
    esp.AlwaysOnTop = true
    esp.ZIndex = 5
    esp.Transparency = 0.5
    esp.Color3 = Color3.new(255,255,255)
    esp.Parent = model
    highlightTable[model] = esp
end

local function destroyHighlight(model)
    local esp = highlightTable[model]
    if esp then
        esp:Destroy()
        highlightTable[model] = nil
    end
end

PlayerESPsection:AddToggle({
	Name = "Player ESPv1",
	Callback = function(New, Old)
	isPlrESPbox = New

    if not isPlrESPbox then
        for model, _ in pairs(highlightTable) do
            destroyHighlight(model)
        end
    end
	end
})

local RunService = game:GetService("RunService")

RunService.Heartbeat:Connect(function()
    if isPlrESPbox then
        for _, model in ipairs(game.Workspace:GetChildren()) do
            if model:IsA("Model") and model:FindFirstChild("Armor") then
                local esp = highlightTable[model]
                if not esp then
                    createHighlight(model)
                end
            else
                destroyHighlight(model)
            end
        end
    end
end)
